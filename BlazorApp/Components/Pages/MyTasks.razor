@page "/mytasks"
@using ClassLibrary.Models
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using System.Text
@using System.Net.WebSockets;
@inject ILogger<Projects> Logger
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Admin, Manager")]
@attribute [StreamRendering]


<PageTitle>My Tasks</PageTitle>

<h1>Echo test</h1>
<h3>State: @webSocket.State</h3>

@if (webSocket.State == WebSocketState.Open)
{
    <form @onsubmit="@SendMessageAsync">
        Message: <input @bind="@message" />
        <button type="submit">Send</button>
    </form>

    <pre>@log</pre>
}

<h1>My Tasks</h1>

@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Deadline</th>
                @* <th>Manager</th> *@
            </tr>
        </thead>
        <tbody>
            @foreach (var item in tasks)
            {
                if (@item.managerId == managerId) 
                {
                    <tr>
                        <td>@item.id</td>
                        <td>@item.name</td>
                        <td>@item.description</td>
                        @if (item.deadline < DateTime.Today.AddDays(2)) @*check if deadline is soon*@
                        {
                            <td style="background-color:red">@item.deadline</td>
                        }
                        else
                        {
                        <td>@item.deadline</td>
                        }
                        @* <td>@item.manager.name</td> *@
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; }


    private List<ClassLibrary.Model.Task>? tasks;

    int managerId = -1; //later change it to whoever is logged in

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // Access the ClaimsPrincipal representing the authenticated user
        var user = authState.User;
        // Find the claim with the specific type ("Id")
        var managerIdClaim = user.FindFirst("Id");
        if (managerIdClaim != null)
        {
            // Extract the value of the claim
            managerId = Convert.ToInt32(managerIdClaim.Value);
            await webSocket.ConnectAsync(new Uri("wss://ws.postman-echo.com/raw"), disposalTokenSource.Token);
            _ = ReceiveLoop();
        }
        else
        {
            // ManagerId claim not found
            Logger.LogWarning("Id was null");
            managerId = -1;
        }
        Logger.LogWarning("User id:" + managerId);


        var settings = new JsonSerializerSettings();
        try
        {
            HttpClient httpClient = new HttpClient();

            string authToken = user.FindFirst("AuthToken").Value;

            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authToken);
            
            HttpResponseMessage response = await httpClient.GetAsync("http://localhost:5005/Task");
            string result = await response.Content.ReadAsStringAsync();
            //Logger.LogWarning(result);
            if (response.IsSuccessStatusCode)
            {
                Logger.LogWarning("Succesful api fetch!");
                tasks = JsonConvert.DeserializeObject<List<ClassLibrary.Model.Task>>(result, settings);
            }
            else
            {
                Logger.LogWarning("Unsuccesful api fetch!");
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning("api failed: " + ex.Message);
        }
        
    }

}
@code {
    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    ClientWebSocket webSocket = new ClientWebSocket();
    string message = "Hello, websocket!";
    string log = "";

    async Task SendMessageAsync()
    {
        log += $"Sending: {message}\n";
        var dataToSend = new ArraySegment<byte>(Encoding.UTF8.GetBytes(message));
        await webSocket.SendAsync(dataToSend, WebSocketMessageType.Text, true, disposalTokenSource.Token);
    }

    async Task ReceiveLoop()
    {
        var buffer = new ArraySegment<byte>(new byte[1024]);
        while (!disposalTokenSource.IsCancellationRequested)
        {
            var received = await webSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
            var receivedAsText = Encoding.UTF8.GetString(buffer.Array, 0, received.Count);
            log += $"Received: {receivedAsText}\n";
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        disposalTokenSource.Cancel();
        _ = webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }
}