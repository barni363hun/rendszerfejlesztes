@page "/mytasks"
@using ClassLibrary.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using System.Text
@inject ILogger<Projects> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Admin, Manager")]
@rendermode InteractiveServer


<PageTitle>My Tasks</PageTitle>

<h1>My Tasks</h1>

@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Deadline</th>
                @* <th>Manager</th> *@
            </tr>
        </thead>
        <tbody>
            @foreach (var item in tasks)
            {
                if (@item.managerId == managerId) 
                {
                    <tr>
                        <td>@item.id</td>
                        <td>@item.name</td>
                        <td>@item.description</td>
                        @if (item.deadline < DateTime.Today.AddDays(2)) @*check if deadline is soon*@
                        {
                            <td style="background-color:red">@item.deadline</td>
                        }
                        else
                        {
                        <td>@item.deadline</td>
                        }
                        @* <td>@item.manager.name</td> *@
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; }

    string url = "http://localhost:5005/TaskHub";
    HubConnection _connection = null;
    JsonSerializerSettings settings = new JsonSerializerSettings();

    private List<ClassLibrary.Model.Task>? tasks;

    int managerId = -1; //later change it to whoever is logged in

    protected override async Task OnInitializedAsync()
    {
        await ConnectToServer();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // Access the ClaimsPrincipal representing the authenticated user
        var user = authState.User;
        // Find the claim with the specific type ("Id")
        var managerIdClaim = user.FindFirst("Id");
        if (managerIdClaim != null)
        {
            // Extract the value of the claim
            managerId = Convert.ToInt32(managerIdClaim.Value);
        }
        else
        {
            // ManagerId claim not found
            Logger.LogWarning("Id was null");
            managerId = -1;
        }
        Logger.LogWarning("User id:" + managerId);


        
        try
        {
            HttpClient httpClient = new HttpClient();

            string authToken = user.FindFirst("AuthToken").Value;

            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", authToken);

            HttpResponseMessage response = await httpClient.GetAsync("http://localhost:5005/Task");
            string result = await response.Content.ReadAsStringAsync();
            //Logger.LogWarning(result);
            if (response.IsSuccessStatusCode)
            {
                Logger.LogWarning("Succesful api fetch!");
                tasks = JsonConvert.DeserializeObject<List<ClassLibrary.Model.Task>>(result, settings);
            }
            else
            {
                Logger.LogWarning("Unsuccesful api fetch!");
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning("api failed: " + ex.Message);
        }

    }
    private async Task ConnectToServer()
    {
        _connection = new HubConnectionBuilder()
            .WithUrl(url)
            .Build();

        await _connection.StartAsync();
        Logger.LogWarning("Connected");

        _connection.Closed += async (s) =>
        {
            Logger.LogWarning("Disconnected");
            await _connection.StartAsync();
        };
        _connection.On<string>("NewTask", m =>
        {
            ClassLibrary.Model.Task newTask = JsonConvert.DeserializeObject<ClassLibrary.Model.Task>(m, settings);
            tasks.Add(newTask);
            InvokeAsync(() =>
            {
                // UI update code here
                StateHasChanged(); // If necessary, to trigger a re-render
            });
            Logger.LogWarning("My tasks: New task added");
            
        });
    }

}