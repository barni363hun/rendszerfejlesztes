@page "/login"
@using ClassLibrary.DTOs
@using ClassLibrary.Models
@inject ILogger<Projects> Logger
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Newtonsoft.Json
@using System.Text
@using System.Security.Claims
@inject NavigationManager NavigationManager
@using Microsoft.IdentityModel.Tokens;
@using System.IdentityModel.Tokens.Jwt

<PageTitle>Login</PageTitle>

<div>
    <EditForm Model="@model" OnValidSubmit="Authenticate" FormName="LoginForm">
        <DataAnnotationsValidator />
        <div>
            <h3>Login</h3>
        </div>
        <div>
            <label>Email</label>
            <InputText @bind-Value="model.Email" placeholder="Email" />
            <ValidationMessage For="() => model.Email" />
        </div>
        <div>
            <label>Password</label>
            <InputText @bind-Value="model.Password" placeholder="Password" type="password"/>
            <ValidationMessage For="() => model.Password" />
        </div>
        <div>
            <span>@errorMessage</span>
        </div>
        <div>
            <button type="submit">Login</button>
        </div>
    </EditForm>
</div>
@code {
    [CascadingParameter]
    public HttpContext? httpContext{ get; set; }

    [SupplyParameterFromForm]
    public ManagerLoginDTO model { get; set; } = new();

    private string? errorMessage;

    private string? tokenString;

    public class TokenResponse
    {
        public string? Token { get; set; }
    }

    private async Task Authenticate()
    {
        Logger.LogWarning("Button pushed");
        var settings = new JsonSerializerSettings();
        try
        {
            HttpClient httpClient = new HttpClient();
            string json = JsonConvert.SerializeObject(model);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            HttpResponseMessage response = await httpClient.PostAsync("http://localhost:5005/token", content);
            Logger.LogWarning(json);
            var result = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {

                TokenResponse temp = JsonConvert.DeserializeObject<TokenResponse>(result, settings);
                tokenString = temp.Token;

                if (tokenString == null)
                {
                    Logger.LogWarning("didn't get the token");
                    return;
                }
            }
            else
            {
                Logger.LogWarning("Unsuccesful api request!");
                Logger.LogWarning(response.StatusCode.ToString());
                //json = await response.Content.ReadAsStringAsync();
                Logger.LogWarning(json);
                return;
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex.Message);
            return;
        }

        var handler = new JwtSecurityTokenHandler();
        var tokenClaims = handler.ReadJwtToken(tokenString) as JwtSecurityToken;
        Claim[] claims = tokenClaims.Claims.ToArray();

        var claimsIdentity = new ClaimsIdentity(claims, "jwt");
        var user = new ClaimsPrincipal(claimsIdentity);

        var principal = new ClaimsPrincipal(user);
        await httpContext.SignInAsync(principal);


        Logger.LogWarning("Succesful login!");
        NavigationManager.NavigateTo("/");
    }
}
