// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240429121323_DevProjTestConnections")]
    partial class DevProjTestConnections
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("ClassLibrary.Model.Task", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("deadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("managerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("projectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("managerId");

                    b.HasIndex("projectId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ClassLibrary.Models.Developer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("ClassLibrary.Models.Manager", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("ClassLibrary.Models.Project", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("typeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("typeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ClassLibrary.Models.ProjectType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("ProjectTypes");
                });

            modelBuilder.Entity("DeveloperProject", b =>
                {
                    b.Property<int>("developersid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("projectsid")
                        .HasColumnType("INTEGER");

                    b.HasKey("developersid", "projectsid");

                    b.HasIndex("projectsid");

                    b.ToTable("DeveloperProject");
                });

            modelBuilder.Entity("ClassLibrary.Model.Task", b =>
                {
                    b.HasOne("ClassLibrary.Models.Manager", "manager")
                        .WithMany("tasks")
                        .HasForeignKey("managerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.Project", "project")
                        .WithMany("tasks")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("manager");

                    b.Navigation("project");
                });

            modelBuilder.Entity("ClassLibrary.Models.Project", b =>
                {
                    b.HasOne("ClassLibrary.Models.ProjectType", "type")
                        .WithMany("projects")
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("type");
                });

            modelBuilder.Entity("DeveloperProject", b =>
                {
                    b.HasOne("ClassLibrary.Models.Developer", null)
                        .WithMany()
                        .HasForeignKey("developersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("projectsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary.Models.Manager", b =>
                {
                    b.Navigation("tasks");
                });

            modelBuilder.Entity("ClassLibrary.Models.Project", b =>
                {
                    b.Navigation("tasks");
                });

            modelBuilder.Entity("ClassLibrary.Models.ProjectType", b =>
                {
                    b.Navigation("projects");
                });
#pragma warning restore 612, 618
        }
    }
}
